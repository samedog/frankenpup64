#!/bin/sh
##########################################################################################
# By Diego Cardenas "The Samedog" under GNU GENERAL PUBLIC LICENSE Version 2, June 1991
# (www.gnu.org/licenses/old-licenses/gpl-2.0.html) e-mail: the.samedog[]gmail.com.
# https://github.com/samedog/frankenpup64
##########################################################################################
#
# ALL OF MY CODE COMMENTS ARE NOT SAFE FOR WORK
# THIS SCRIPT IS A SET OF HORRIBLE HACKS, IT MIGHT WORK, MIGHT OPEN A VORTEX AND SEND YOU TO A
# COMPLETELY DIFFERENT UNIVERSE, OR MIGHT NOT DO SHIT.
#
##########################################################################################

################################# Code begins here #######################################


## some variables and shit

URL="www.dropbox.com"                                                                                	  # back to dropbox
URL2="www.google.com"                                                                               	  # most reliable ping
DB_URL="https://raw.githubusercontent.com/samedog/frankenpup64/master/packages_db/packages-1.4_next.txt"  # package database url
DB_FOLDER="/var/fpackages"                                                                           	  # installed packages folder
DB_LOCATION="$DB_FOLDER/packages.txt"                                                               	  # databse location on disk
VERSION="0.7"

#### strings
LOCALE=$(locale | grep LANG | cut -d'=' -f2 | cut -d'_' -f1)

if [ $LOCALE == "es" ];then
    LOCAL_INSTALL_STR="Instalación de paquete local..."
    PACKAGE_STR="Paquete"
    FOUND_STR="Encontrado"
    DEPENDS_STR="Depende de"
    ERROR_CODE_1_STR="Algo salió mal, código de error; 1"
    ERROR_CODE_2_STR="Algo salió mal, código de error; 2"
    ERROR_CODE_3_STR="Algo salió mal, código de error; 3"
    ERROR_CODE_4_STR="Algo salió mal, código de error; 4"
    PKG_DB_UPDATED="Package database upgraded successfully"
    NO_INTERNET_STR="No hay conexión a internet o 100% pérdida de apquetes"
    ALRD_INSTALLED_STR="El paquete ya está instalado"
else
    LOCAL_INSTALL_STR="Local package install..."
    PACKAGE_STR="Package"
    FOUND_STR="Found"
    DEPENDS_STR="Depends on"
    ERROR_CODE_1_STR="Something went wrong, error code: 1"
    ERROR_CODE_2_STR="Something went wrong, error code: 2"
    ERROR_CODE_3_STR="Something went wrong, error code: 3"
    ERROR_CODE_4_STR="Something went wrong, error code: 4"
    PKG_DB_UPDATED="Package database upgraded successfully"
    NO_INTERNET_STR="No internet connection or 100% package loss"
    ALRD_INSTALLED_STR="Package already installed"
fi

### function to ping google.com to check if we are (or not) connected to the internet

ping_server(){
    ping -c 1 $URL2 > /dev/null
    if [ $? -eq 0 ]; then
        PING=$(ping -c 1 $URL | grep received | cut -d' ' -f7 2> /dev/null)
        LOSS=${PING//%}
        #echo $LOSS
    else
        return 2
    fi
}


### function to search a package
search_package(){
    SEARCH="$1"
    if [ -f "$SEARCH" ];then
        echo "-----------------------------------------"
        echo "$LOCAL_INSTALL_STR"
        echo "-----------------------------------------"
        return 3
    elif [ ! -f "DB_LOCATION" ]; then
        true
        #db_download 1
    fi
    
    #RESULT=$(cat $DB_LOCATION | grep -i $SEARCH)
    RESULT=()
    while IFS= read -r line
	do
		#echo $line
		name=$(echo $line | cut -d'|' -f 1 | cut -d'/' -f 2)
		if [[ "$name" == *"$SEARCH"*  ]];then
			RESULT+=( "$line" )
		fi
	done < "$DB_LOCATION"
}

### function to download and update the package list "database" ######################################
db_download(){
    SILENT="$1"
    CON=$(ping_server)
    if [ $? -ne 2 ]; then   ## check if we are connected to the internet
        if [ ! -z "$SILENT" ];then
            curl -H 'Cache-Control: no-cache' -s -o "$DB_LOCATION" "$DB_URL"
            if [ $? != 0 ]; then
                echo "$ERROR_CODE_1_STR"
            fi
        else
            curl -H 'Cache-Control: no-cache' --progress-bar -o "$DB_LOCATION" "$DB_URL"
            if [ $? -eq 0 ]; then
                echo "$PKG_DB_UPDATED"
            else
                echo "$ERROR_CODE_1_STR"
            fi
        fi
    else
        echo "$NO_INTRNET_STR"
        exit
    fi
}

### function to install a package or local pakage ##################################################################
install(){
	cd /tmp ##
    PACK="$1"
    NOASK="$2"
    
	if [ ! -z "$NOASK" ]; then
		CHECK="y"
	#else
		## if we are installing from the CLI this should be asked
		#read -p "Is this ok? (y/n)" CHECK
	fi
	
    #LOCAL_INSTALL=0
    search_package "$PACK"
    if [ $? -eq 3 ]; then
        CHNAME=$(echo $PACK | cut -d'-' -f1 2>/dev/null)
        CNAME=$(echo $PACK | sed "s/.fxz//" 2>/dev/null)
        ## is package installed?
        if [ -f "$DB_FOLDER/$CNAME" ]; then
            echo "$ALRD_INSTALLED_STR"
            echo "/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\"
            echo -e "WARNING: Package was installed using and older version of finstall\nplease update your system"
            echo "/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\"
            exit
        fi
        if [ -d "$DB_FOLDER/$CNAME" ]; then
            echo "Package already installed"
            exit
        fi

        LOCATION="/tmp/$NAME"
        echo "-----------------------------------------"
        echo "Installing package..."
        echo "-----------------------------------------"
        cp -rf $PACK /tmp/$PACK
        flag=$(pgrep -x "jwm")
        cd /tmp
        tar xf "$PACK"
        if [ $? -eq 0 ]; then
            rm -rf "$PACK"
            echo "-----------------------------------------"
            echo "Looking for custom install script..."
            if [ -f /tmp/$CNAME/install ]; then
                echo "-----------------------------------------"
                echo "executing custom install script..."
                /tmp/$CNAME/install
                if [ $? -eq 0 ]; then
                    rm -rf /tmp/$CNAME/install
                    rm -rf /tmp/$CNAME
                    echo "-----------------------------------------"
                    if [ ! -z "$flag" ]; then
                        fixmenus
                        jwm -reload
                    fi
                    echo "Done"
                    if [ -f /install ]; then
                        rm -rf /install
                    fi
                else
                    echo "$ERROR_CODE_4_STR"
                fi
            else
                echo "" > "$DB_FOLDER/$CNAME"
                rm -rf /tmp/$CNAME
                if [ ! -z "$flag" ]; then
                    fixmenus
                    jwm -reload
                fi
                echo "Done"
            fi
        else
            echo "$ERROR_CODE_2_STR"
        fi

    elif [ $? -eq 0 ]; then
        echo "No package \"$PACK\" found"
    else
		MULTIPLE=0
		PACKAGESTOINSTALL=()
		if [ ! -z "$RESULT" ]; then
			if [ ${#RESULT[@]} -gt 1 ];then
				MULTIPLE=1
				echo  "${#RESULT[@]} packages found containing \"$SEARCH\""
				for ((i=1; i<=${#RESULT[@]};i++))
				do
					echo "[$i] ${RESULT[$(( $i - 1 ))]}" | cut -d'|' -f'1'
				done
				echo "which one do you wanna install? (Type number or numbers separated by a comma or type \"a\" for all)"
				read which_one
			else
				echo "found $RESULT" | cut -d'|' -f'1'
			fi
			echo "i'm gonna install: "
			if [[ "$which_one" == *","* ]];then
				count="${which_one//[^,]}"
                count="${#count}"
                while [ -z $CHECK ]
				do
					for ((i=1; i<=$(( $count + 1 ));i++))
					do
						package=$(echo $which_one | cut -d',' -f $i)
						echo "${RESULT[$(( $package - 1 ))]}" | cut -d'|' -f'1' | cut -d'/' -f 2
						PACKAGESTOINSTALL+=( "${RESULT[$(( $package - 1 ))]}" )
					done
					read -p "Is this ok? (y/n)" CHECK
				done
            elif [[ "$which_one" == "a" ]];then
				while [ -z $CHECK ]
				do
					for ((i=0; i<${#RESULT[@]};i++))
					do
						echo "${RESULT[$(( $i - 1 ))]}" | cut -d'|' -f'1' | cut -d'/' -f 2
						PACKAGESTOINSTALL+=( "${RESULT[$(( $i - 1 ))]}" )
					done
					read -p "Is this ok? (y/n)" CHECK
				done
			else
				PACKAGESTOINSTALL+=( "${RESULT[$(( $which_one - 1 ))]}" )
				echo "$RESULT" | cut -d'|' -f'1' | cut -d'/' -f 2
				if [ -z $CHECK ];then
					read -p "Is this ok? (y/n)" CHECK
				fi
			fi
			
			
			
			### lasdt check before actual ihnstall
			
			if [[ $CHECK == "n" ]];then
				exit 1
			fi
					
				count=${#PACKAGESTOINSTALL[@]}
				for ((i=0;i<"$count";i++))
				do
					NAME=$(echo "${PACKAGESTOINSTALL[($i)]}" | cut -d'|' -f'1' | cut -d'/' -f 2)
					echo "Processing: $NAME"
					DEPS=$(echo "${PACKAGESTOINSTALL[($i)]}" | cut -d'|' -f4 )
					#echo "$FOUND_STR:"
					echo "$NAME"
					if [ ! -z "$DEPS" ] && [ ! "$DEPS" == " " ]; then
						echo "==========================================="
						echo "$PACKAGE_STR: $NAME"
						echo "$DEPENDS_STR:"
						echo "$DEPS"
						echo "==========================================="
					fi
				
			########## begin package processing
				CHNAME=$(echo $NAME | cut -d'-' -f1 2>/dev/null)
				PURL=$(echo "${PACKAGESTOINSTALL[($i)]}" | cut -d'|' -f2 )
				#echo $PURL
				CNAME=$(echo $NAME | sed "s/.fxz//" 2>/dev/null)
					
				## is package installed?
				if [ -f "$DB_FOLDER/$CNAME" ]; then
					echo "$ALRD_INSTALLED_STR"
					echo "/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\"
					echo -e "WARNING: Package was installed using and older version of finstall\nplease update your system"
					echo "/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\"
					exit
				fi
				
				if [ -d "$DB_FOLDER/$CNAME" ]; then
					echo "Package already installed"
					exit
				fi

				## NOASK is the default dep resolver option
				
					
					
				###dependency check
				if [ $CHECK == "y"  ] ;then
					## DEPS FIRST ===========================================
					if [ ! -z "$DEPS" ]; then
						count="${DEPS//[^,]}"
						count=$(( ${#count} + 1 ))
						#echo "dep count: $count"
						echo "============================================================="
						echo "Trying to resolve deps:"
						#echo "$count deps on database"
						for (( c=1; c<=$count; c++)) ##we skip the blank field and count from that on
							do
								##we try to fix single deps
								#echo "loop count: $c"
								if [[ $count -eq 1 ]];then
									EACH=$(echo "$DEPS")
								else
									EACH=$(echo "$DEPS" | cut -d"," -f"$c")
								fi
								###
								if [ ! -z "$EACH" ]; then
									#echo "\"$EACH\""
									#echo "dbfolder to search: $DB_FOLDER/$EACH"
									if [ -d "$DB_FOLDER/$EACH" ]; then
										echo "Package $EACH already installed"
									else
										finstall i "$EACH" "yes"
									fi
								fi
							done
						echo "============================================================="
						
						#exit 1
					fi
					## end deps resolving ====================================
					LOCATION="/tmp/$NAME"
					echo "-----------------------------------------"
					echo "Downloading package..."
					echo "-----------------------------------------"
					pcurl "$LOCATION" "http://$URL/$PURL"
					#echo "https://$URL/$PURL"
					
					#exit 1
					
					if [ $? -eq 0 ]; then
					flag=$(pgrep -x "jwm")
						cd /tmp
						tar xf "$NAME"
						if [ $? -eq 0 ]; then
							rm -rf "$NAME"
							echo "-----------------------------------------"
							echo "Looking for custom install script..."
							if [ -f /tmp/$CNAME/install ]; then
								echo "-----------------------------------------"
								echo "executing custom install script..."
								/tmp/$CNAME/install
								if [ $? -eq 0 ]; then
									rm -rf /tmp/$CNAME/install
									rm -rf /tmp/$CNAME
									echo "-----------------------------------------"
									if [ ! -z "$flag" ]; then
										fixmenus
										jwm -reload
									fi
									echo "Done"
									if [ -f /install ]; then
										rm -rf /install
									fi
								else
									echo "$ERROR_CODE_4_STR"
								fi
							else
								echo "" > "$DB_FOLDER/$CNAME"
								rm -rf /tmp/$CNAME
								if [ ! -z "$flag" ]; then
									fixmenus
									jwm -reload
								fi
								echo "Done"
							fi
						else
							echo "$ERROR_CODE_2_STR"
						fi
					else
						echo "$ERROR_CODE_3_STR"
					fi
				fi
			done
			exit 1
		
        #NAME=$(cat $DB_LOCATION | cut -d'|' -f1 | grep -i $PACK | cut -d' ' -f1 | cut -d'/' -f2 2>/dev/null)
        else
            echo "Nothing was done."
        fi
    fi
}


### function to "uninstall" a package  ######################################
uninstall(){
    PACK="$1"
    PACK_NAME=$(echo $PACK | sed "s/.fxz//" 2>/dev/null)
    SEARCH=$(ls $DB_FOLDER | grep -m 1 -i $PACK_NAME | head -1)
    if [ ! -z "$SEARCH" ]; then
        NAME=$(cat $DB_LOCATION | cut -d'|' -f1 | grep -i $PACK | cut -d' ' -f1 | cut -d'/' -f2)
        CNAME=$(echo $NAME | sed "s/.fxz//")
        DEPS=$(cat $DB_LOCATION | grep -i $NAME | cut -d'|' -f4 )
        echo "$SEARCH found"
        read -p "Is this ok? (y/n)" CHECK
        if [ $CHECK == "y" ];then
            echo "Looking for uninstall script"
            if [ -f "$DB_FOLDER/$CNAME/uninstall" ]; then
				cd "$DB_FOLDER/$CNAME/"
                echo "Uninstall script found, running..."
                "$DB_FOLDER/$CNAME/uninstall"
                echo "removing from installed database"
				rm -rf "$DB_FOLDER/$CNAME"
				cd /root
            else
                echo "No script found, skipping"
            fi

            echo "Done"
        else
            echo "Nothing was done."
        fi
    else
        echo "No package \"$PACK\" found, are you sure it's installed?"
        exit 
    fi


}

### function to upgrade scripts, this is just a set of multiple wget and will get 'em regardless if they are up to date on the machine or not
### too lazy to make a more complex scrilkakaljdlaks

supdate(){
    ping_server
    if [ $? -eq 0 ]; then
        ### just in case shit fails
        cd /tmp/scripts
        curl -H 'Cache-Control: no-cache' -L --progress-bar -o "finstall" "https://raw.githubusercontent.com/samedog/frankenpup64/master/scripts/finstall-1.4_next"
        curl -H 'Cache-Control: no-cache' -L --progress-bar -O "https://raw.githubusercontent.com/samedog/frankenpup64/master/scripts/create-fxz"
        curl -H 'Cache-Control: no-cache' -L --progress-bar -O "https://raw.githubusercontent.com/samedog/frankenpup64/master/scripts/pcurl"
        # rreleases need to be reworked to actually work
        #curl -H 'Cache-Control: no-cache' -L --progress-bar -o "rreleases" "https://raw.githubusercontent.com/samedog/frankenpup64/master/scripts/rreleases-1.4_next"
        curl -H 'Cache-Control: no-cache' -L --progress-bar -O "https://raw.githubusercontent.com/samedog/frankenpup64/master/scripts/night-mode-switch"
        if [ $? -eq 0 ]; then
            echo "making executable..."
            chmod -R 1777 ./*
            echo "Copying to my-applications..."
            cp -rf /tmp/scripts/* /root/my-applications/bin/
            echo "Done"
            exec rm -rf /tmp/finstall-tmp
        fi
    else
        echo "No internet connection, 100% package loss or server offline"
    fi
}
rolling_release(){
    rreleases
}

### initialization and shit
case "$1" in
    i)
        install "$2" "$3"
    ;;
    ri)
        uninstall "$2"
        install "$2" "yes"
    ;;
    s)
        search_package "$2"
        if [ $? -eq 0 ]; then
            echo "No package \"$2\" found"
        else
            exit
        fi
    ;;
    us)
        rolling_release
    ;;
    dbu)
        echo "updating package list..."
        db_download
    ;;
    ui)
        uninstall "$2"
    ;;
    su)
        cp -rf /root/my-applications/bin/finstall /tmp/finstall-tmp
        chmod 1777 /tmp/finstall-tmp
        exec /tmp/finstall-tmp supdate-tmp
    ;;
    supdate-tmp)
        if [ -d /tmp/scripts ];then
			rm -rf /tmp/scripts/*
        else
			mkdir /tmp/scripts
        fi
        killall kill finstall 2>/dev/null
        supdate
        /root/my-applications/bin/finstall finish
        supdate
    ;;
    finish)
    #hope this works
        rm -rf /tmp/scripts/*
        rm -rf /tmp/scripts
    ;;
    l)
        if [ ! -f "$DB_LOCATION" ]; then
            db_download
        fi
        echo "$(cat "$DB_LOCATION" | cut -d'|' -f 1,3)"
    ;;
    li)
        ls /var/fpackages
    ;;
    v)
    echo "$VERSION"
    ;;
    *)
    echo "This small script was created to handle software compiled and tested for frankenpup64

Usage: finstall {i|ri|u|ui|s|dbu|su|l|v}

i:          Install a package.
               ex: finstall i gimp or finstall i gimp.txz for a local package
ri:        Reinstalls a package.
us:         Install system updates.
ui:        Uninstalls a package.
s:         Search a package.
               ex: finstall search gimp
dbu:       Updates the package database.
su:        Updates frankenpup scripts.
l:         List all packages in database.
li:        List all installed packages.
v:         Prints script version
"

esac
