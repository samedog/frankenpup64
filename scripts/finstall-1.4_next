#!/bin/sh
##########################################################################################
# By Diego Cardenas "The Samedog" under GNU GENERAL PUBLIC LICENSE Version 2, June 1991
# (www.gnu.org/licenses/old-licenses/gpl-2.0.html) e-mail: the.samedog[]gmail.com.
# https://github.com/samedog/frankenpup64
##########################################################################################
#
# ALL OF MY CODE COMMENTS ARE NOT SAFE FOR WORK
# THIS SCRIPT IS A SET OF HORRIBLE HACKS, IT MIGHT WORK, MIGHT OPEN A VORTEX AND SEND YOU TO A
# COMPLETELY DIFFERENT UNIVERSE, OR MIGHT NOT DO SHIT.
#
##########################################################################################

#Changelog:
# 24-06-2015: - Moved scripts from bitbucket to dropbox, i don't feel like packing
#               git on the main sfs for a fucking couple of less than 50kb scripts because bitbucket raw
#               view changes the url of the file on each commit.
# 26-06-2015: - Added package descriptions.
# 26-06-2015: - Changed from dropbox to github, since it has better way to handle files without
#               compromising the raw file url.
# 30-06-2015: - Added prompts on install and uninstall to avoid PEBKAC.
# 03-07-2015: - Added package database URL variable, fixed the placement of the "y/n" prompt for package
#               uninstall.
#             - Removed *some* irony from code comments so they don't hurt feelings anymore ;^).
# 13-07-2015: - Renamed to fpackages.
#             - Version number changed to 0.2.
# 20-07-2015: - Added basic dep resolving.
#             - "install" option will not try to install a package if it's already installed, that's "reinstall"'s job.
#             - Version bumped to to 0.3 (dep resolving).
# 11-02-2016: - Renamed to kinstall.
#             - Version bumped to 0.3.1 (for me to track some minor shit).
# 16-10-2017: - switched to curl.
#             - fixed some bad conditions.
#             - Version bumped to 0.4.
# 05-05-2019: - Repurposed for frankenpup64, since frankenpup (32) script was older.
#             - Some code cleanup and variable fixing for better package handling.
#             - Version bumped to 0.5 for obvious reasons.
# 07-05-2019: - Added a condition for jwm to update menus.
#             - Grep -i for searching packages (REALLY).
# 09-05-2019  - Changed package database to frankenpuplinux.com.
#             - Package database back to github (easier to maintain).
#             - package repo will remain at frankenpuplinux.com instad of dropbox.
# 15-05-2019  - Changes to functions names.
#             - Now the script uses pcurl, a wrapper for multiple curl threads.
#             - Some code cleanup.
#             - Removed "if [ ! -d $DB_FOLDER ]" since it's not needed anymore (since a while really)
#             - Added "if [ -f /install ]" to remove it if needed
#             - Added "if [ ! -f /tmp/scripts ]" not a mandatory update but the "mkdir: cannot create directory â€˜/tmp/scriptsâ€™: File exists"
#               was getting on my nerves.
#             - ping_server is now silent (it should have been silent since the beginning)
# 20-05-2019  - Added -H 'Cache-Control: no-cache' to curl.
# 17-06-2019  - Fixed a stupid typo causing an infinite loop on some packages.
#             - btw i started frankenpup on 17-06-2007 :D
# 15-11-2019  - Back to dropbox, becuse i forgot to pay for the hosting and got deleted (yes, i'm THAT stupid)
# 17-11-2019  - Now you can install local downloaded packages.
# 18-11-2019  - Added rolling release capabilities by the rrelease script (experimental)
#             - Version bumped to 0.6
# 24-11-2019  - Options changed to letters instead of full words to make it easier to use.
# 25-11-2019  - fixed reinstall function
# 01-12-2019  - Added locale support for Spanish
# 25-06-2020  - Multiple fixes and changes for frankenpup 1.4
################################# Code begins here #######################################


## some variables and shit

URL="www.dropbox.com"                                                                                	  # back to dropbox
URL2="www.google.com"                                                                               	  # most reliable ping
DB_URL="https://raw.githubusercontent.com/samedog/frankenpup64/master/packages_db/packages-1.4_next.txt"  # package database url
DB_FOLDER="/var/fpackages"                                                                           	  # installed packages folder
DB_LOCATION="$DB_FOLDER/packages.txt"                                                               	  # databse location on disk
VERSION="0.6.1"

#### strings
LOCALE=$(locale | grep LANG | cut -d'=' -f2 | cut -d'_' -f1)

if [ $LOCALE == "es" ];then
    LOCAL_INSTALL_STR="Instalación de paquete local..."
    PACKAGE_STR="Paquete"
    FOUND_STR="Encontrado"
    DEPENDS_STR="Depende de"
    ERROR_CODE_1_STR="Algo salió mal, código de error; 1"
    ERROR_CODE_2_STR="Algo salió mal, código de error; 2"
    ERROR_CODE_3_STR="Algo salió mal, código de error; 3"
    ERROR_CODE_4_STR="Algo salió mal, código de error; 4"
    PKG_DB_UPDATED="Package database upgraded successfully"
    NO_INTERNET_STR="No hay conexión a internet o 100% pérdida de apquetes"
    ALRD_INSTALLED_STR="El paquete ya está instalado"
else
    LOCAL_INSTALL_STR="Local package install..."
    PACKAGE_STR="Package"
    FOUND_STR="Found"
    DEPENDS_STR="Depends on"
    ERROR_CODE_1_STR="Something went wrong, error code: 1"
    ERROR_CODE_2_STR="Something went wrong, error code: 2"
    ERROR_CODE_3_STR="Something went wrong, error code: 3"
    ERROR_CODE_4_STR="Something went wrong, error code: 4"
    PKG_DB_UPDATED="Package database upgraded successfully"
    NO_INTERNET_STR="No internet connection or 100% package loss"
    ALRD_INSTALLED_STR="Package already installed"
fi

### function to ping google.com to check if we are (or not) connected to the internet

ping_server(){
    ping -c 1 $URL2 > /dev/null
    if [ $? -eq 0 ]; then
        PING=$(ping -c 1 $URL | grep received | cut -d' ' -f7 2> /dev/null)
        LOSS=${PING//%}
        #echo $LOSS
    else
        return 2
    fi
}


### function to search a package
search_package(){
    SEARCH="$1"
    if [ -f "$SEARCH" ];then
        echo "-----------------------------------------"
        echo "$LOCAL_INSTALL_STR"
        echo "-----------------------------------------"
        return 3
    elif [ ! -f "DB_LOCATION" ]; then
        db_download 1
    fi
    RESULT=$(cat $DB_LOCATION | grep -i $SEARCH)
    if [ ! -z "$RESULT" ]; then
        RESULT=$(cat $DB_LOCATION | cut -d'>' -f1 | grep -i $SEARCH | cut -d'/' -f2)
        NAME=$(cat $DB_LOCATION | cut -d'>' -f1 | grep -i $SEARCH | cut -d' ' -f1 | cut -d'/' -f2)
        DEPS=$(cat "$DB_LOCATION" | grep -i $NAME -s | cut -d'>' -f4 )
        echo "$FOUND_STR:"
        echo "$RESULT"
        if [ ! -z "$DEPS" ] && [ ! "$DEPS" == " " ]; then
            echo "==========================================="
            echo "$PACKAGE_STR: $NAME"
            echo "$DEPENDS_STR:"
            echo "$DEPS"
            echo "==========================================="
        fi
        return 1
    else
        return 0
    fi
}

### function to download and update the package list "database" ######################################
db_download(){
    SILENT="$1"
    CON=$(ping_server)
    if [ $? -ne 2 ]; then   ## check if we are connected to the internet
        if [ ! -z "$SILENT" ];then
            curl -H 'Cache-Control: no-cache' -s -o "$DB_LOCATION" "$DB_URL"
            if [ $? != 0 ]; then
                echo "$ERROR_CODE_1_STR"
            fi
        else
            curl -H 'Cache-Control: no-cache' --progress-bar -o "$DB_LOCATION" "$DB_URL"
            if [ $? -eq 0 ]; then
                echo "$PKG_DB_UPDATED"
            else
                echo "$ERROR_CODE_1_STR"
            fi
        fi
    else
        echo "$NO_INTRNET_STR"
        exit
    fi
}

### function to install a package or local pakage ##################################################################
install(){
	cd /tmp ##
    PACK="$1"
    NOASK="$2"
    LOCAL_INSTALL=0
    search_package "$PACK"
    if [ $? -eq 3 ]; then
        CHNAME=$(echo $PACK | cut -d'-' -f1 2>/dev/null)
        CNAME=$(echo $PACK | sed "s/.fxz//" 2>/dev/null)
        ## is package installed?
        if [ -f "$DB_FOLDER/$CNAME" ]; then
            echo "$ALRD_INSTALLED_STR"
            echo "/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\"
            echo -e "WARNING: Package was installed using and older version of finstall\nplease update your system"
            echo "/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\"
            exit
        fi
        if [ -d "$DB_FOLDER/$CNAME" ]; then
            echo "Package already installed"
            exit
        fi

        LOCATION="/tmp/$NAME"
        echo "-----------------------------------------"
        echo "Installing package..."
        echo "-----------------------------------------"
        cp -rf $PACK /tmp/$PACK
        flag=$(pgrep -x "jwm")
        cd /tmp
        tar xf "$PACK"
        if [ $? -eq 0 ]; then
            rm -rf "$PACK"
            echo "-----------------------------------------"
            echo "Looking for custom install script..."
            if [ -f /tmp/$CNAME/install ]; then
                echo "-----------------------------------------"
                echo "executing custom install script..."
                /tmp/$CNAME/install
                if [ $? -eq 0 ]; then
                    rm -rf /tmp/$CNAME/install
                    rm -rf /tmp/$CNAME
                    echo "-----------------------------------------"
                    if [ ! -z "$flag" ]; then
                        fixmenus
                        jwm -reload
                    fi
                    echo "Done"
                    if [ -f /install ]; then
                        rm -rf /install
                    fi
                else
                    echo "$ERROR_CODE_4_STR"
                fi
            else
                echo "" > "$DB_FOLDER/$CNAME"
                rm -rf /tmp/$CNAME
                if [ ! -z "$flag" ]; then
                    fixmenus
                    jwm -reload
                fi
                echo "Done"
            fi
        else
            echo "$ERROR_CODE_2_STR"
        fi

    elif [ $? -eq 0 ]; then
        echo "No package \"$PACK\" found"
    else
        NAME=$(cat $DB_LOCATION | cut -d'>' -f1 | grep -i $PACK | cut -d' ' -f1 | cut -d'/' -f2 2>/dev/null)
        CHNAME=$(echo $NAME | cut -d'-' -f1 2>/dev/null)
        PURL=$(cat $DB_LOCATION | cut -d'>' -f2 | grep -i $CHNAME | cut -d' ' -f2 2>/dev/null)
        CNAME=$(echo $NAME | sed "s/.fxz//" 2>/dev/null)
        DEPS=$(cat $DB_LOCATION | grep -i $PURL | cut -d'>' -f4 2>/dev/null)

        ## is package installed?
        if [ -f "$DB_FOLDER/$CNAME" ]; then
            echo "$ALRD_INSTALLED_STR"
            echo "/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\"
            echo -e "WARNING: Package was installed using and older version of finstall\nplease update your system"
            echo "/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\/!\\"
            exit
        fi
        if [ -d "$DB_FOLDER/$CNAME" ]; then
            echo "Package already installed"
            exit
        fi

        ## NOASK is the default dep resolver option
        if [ ! -z "$NOASK" ]; then
            CHECK="y"
        else
            ## if we are installing from the CLI this should be asked
            read -p "Is this ok? (y/n)" CHECK
        fi
        if [ $CHECK == "y"  ] ;then
            ## DEPS FIRST ===========================================
            if [ ! -z "$DEPS" ]; then
                count="${DEPS//[^ ]}"
                count="${#count}"
                echo "============================================================="
                echo "Trying to resolve deps:"
                #echo "$count deps on database"
                for (( c=2; c<=$count+1; c++)) ##we skip the blank field and count from that on
                    do
                        EACH=$(echo "$DEPS" | cut -d" " -f"$c")
                        if [ ! -z "$EACH" ]; then
                            echo "\"$EACH\""
                            if [ -f "$DB_FOLDER/$EACH" ]; then
                                echo "Package already installed"
                            else
                                finstall i "$EACH" "yes"
                            fi
                        fi
                    done
                echo "============================================================="
            fi
            ## end deps resolving ====================================
            LOCATION="/tmp/$NAME"
            echo "-----------------------------------------"
            echo "Downloading package..."
            echo "-----------------------------------------"
            pcurl "$LOCATION" "http://$URL/$PURL"
            if [ $? -eq 0 ]; then
            flag=$(pgrep -x "jwm")
                cd /tmp
                tar xf "$NAME"
                if [ $? -eq 0 ]; then
                    rm -rf "$NAME"
                    echo "-----------------------------------------"
                    echo "Looking for custom install script..."
                    if [ -f /tmp/$CNAME/install ]; then
                        echo "-----------------------------------------"
                        echo "executing custom install script..."
                        /tmp/$CNAME/install
                        if [ $? -eq 0 ]; then
                            rm -rf /tmp/$CNAME/install
                            rm -rf /tmp/$CNAME
                            echo "-----------------------------------------"
                            if [ ! -z "$flag" ]; then
                                fixmenus
                                jwm -reload
                            fi
                            echo "Done"
                            if [ -f /install ]; then
                                rm -rf /install
                            fi
                        else
                            echo "$ERROR_CODE_4_STR"
                        fi
                    else
                        echo "" > "$DB_FOLDER/$CNAME"
                        rm -rf /tmp/$CNAME
                        if [ ! -z "$flag" ]; then
                            fixmenus
                            jwm -reload
                        fi
                        echo "Done"
                    fi
                else
                    echo "$ERROR_CODE_2_STR"
                fi
            else
                echo "$ERROR_CODE_3_STR"
            fi
        else
            echo "Nothing was done."
        fi
    fi
}


### function to "uninstall" a package  ######################################
uninstall(){
    PACK="$1"
    PACK_NAME=$(echo $PACK | sed "s/.fxz//" 2>/dev/null)
    SEARCH=$(ls $DB_FOLDER | grep -m 1 -i $PACK_NAME | head -1)
    if [ ! -z "$SEARCH" ]; then
        NAME=$(cat $DB_LOCATION | cut -d'>' -f1 | grep -i $PACK | cut -d' ' -f1 | cut -d'/' -f2)
        CNAME=$(echo $NAME | sed "s/.fxz//")
        DEPS=$(cat $DB_LOCATION | grep -i $NAME | cut -d'>' -f4 )
        echo "$SEARCH found"
        read -p "Is this ok? (y/n)" CHECK
        if [ $CHECK == "y" ];then
            echo "Looking for uninstall script"
            if [ -f "$DB_FOLDER/$CNAME/uninstall" ]; then
				cd "$DB_FOLDER/$CNAME/"
                echo "Uninstall script found, running..."
                "$DB_FOLDER/$CNAME/uninstall"
                echo "removing from installed database"
				rm -rf "$DB_FOLDER/$CNAME"
				cd /root
            else
                echo "No script found, skipping"
            fi

            echo "Done"
        else
            echo "Nothing was done."
        fi
    else
        echo "No package \"$PACK\" found, are you sure it's installed?"
        exit 
    fi


}

### function to upgrade scripts, this is just a set of multiple wget and will get 'em regardless if they are up to date on the machine or not
### too lazy to make a more complex scrilkakaljdlaks

supdate(){
    ping_server
    if [ $? -eq 0 ]; then
        ### just in case shit fails
        cd /tmp/scripts
        curl -H 'Cache-Control: no-cache' -L --progress-bar -o "finstall" "https://raw.githubusercontent.com/samedog/frankenpup64/master/scripts/finstall-1.4_next"
        curl -H 'Cache-Control: no-cache' -L --progress-bar -O "https://raw.githubusercontent.com/samedog/frankenpup64/master/scripts/create-fxz"
        curl -H 'Cache-Control: no-cache' -L --progress-bar -O "https://raw.githubusercontent.com/samedog/frankenpup64/master/scripts/pcurl"
        # rreleases need to be reworked to actually work
        #curl -H 'Cache-Control: no-cache' -L --progress-bar -o "rreleases" "https://raw.githubusercontent.com/samedog/frankenpup64/master/scripts/rreleases-1.4_next"
        curl -H 'Cache-Control: no-cache' -L --progress-bar -O "https://raw.githubusercontent.com/samedog/frankenpup64/master/scripts/night-mode-switch"
        if [ $? -eq 0 ]; then
            echo "making executable..."
            chmod -R 1777 ./*
            echo "Copying to my-applications..."
            cp -rf /tmp/scripts/* /root/my-applications/bin/
            echo "Done"
            exec rm -rf /tmp/finstall-tmp
        fi
    else
        echo "No internet connection, 100% package loss or server offline"
    fi
}
rolling_release(){
    rreleases
}

### initialization and shit
case "$1" in
    i)
        install "$2" "$3"
    ;;
    ri)
        uninstall "$2"
        install "$2" "yes"
    ;;
    s)
        search_package "$2"
        if [ $? -eq 0 ]; then
            echo "No package \"$2\" found"
        else
            exit
        fi
    ;;
    us)
        rolling_release
    ;;
    dbu)
        echo "updating package list..."
        db_download
    ;;
    ui)
        uninstall "$2"
    ;;
    su)
        cp -rf /root/my-applications/bin/finstall /tmp/finstall-tmp
        chmod 1777 /tmp/finstall-tmp
        exec /tmp/finstall-tmp supdate-tmp
    ;;
    supdate-tmp)
        if [ -d /tmp/scripts ];then
			rm -rf /tmp/scripts/*
        else
			mkdir /tmp/scripts
        fi
        killall kill finstall 2>/dev/null
        supdate
        /root/my-applications/bin/finstall finish
        supdate
    ;;
    finish)
    #hope this works
        rm -rf /tmp/scripts/*
        rm -rf /tmp/scripts
    ;;
    l)
        if [ ! -f "$DB_LOCATION" ]; then
            db_download
        fi
        echo "$(cat "$DB_LOCATION" | cut -d'>' -f 1,3)"
    ;;
    li)
        ls /var/fpackages
    ;;
    v)
    echo "$VERSION"
    ;;
    *)
    echo "This small script was created to handle software compiled and tested for frankenpup64

Usage: finstall {i|ri|u|ui|s|dbu|su|l|v}

i:          Install a package.
               ex: finstall i gimp or finstall i gimp.txz for a local package
ri:        Reinstalls a package.
us:         Install system updates.
ui:        Uninstalls a package.
s:         Search a package.
               ex: finstall search gimp
dbu:       Updates the package database.
su:        Updates frankenpup scripts.
l:         List all packages in database.
li:        List all installed packages.
v:         Prints script version
"

esac
